plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
}

apply plugin: 'jacoco'

group 'com.github.shynixn'
version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    failFast = true

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version: '3.3.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    compileOnly 'org.spigotmc:spigot111R1:1.11.0-R1.0'

    testCompile 'org.mockito:mockito-core:2.23.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task downloadDependencies(type:Exec) {
    def build = new File('build')

    if(!build.exists()){
        build.mkdir()
    }

    def folder = new File(build, 'buildtools')

    if(!folder.exists()){
        folder.mkdir()
    }

    def file = new File(folder, "BuildTools.jar")

    if (!file.exists()) {
        new URL('https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar').withInputStream{ i -> file.withOutputStream{ it << i }}
    }

    def text = "cd build/buildtools"

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', text
    } else {
        commandLine text
    }
}