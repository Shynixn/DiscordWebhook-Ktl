buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'org.jetbrains.kotlin.jvm' version '1.3.20'
}

apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven'
apply plugin: 'signing'

group 'com.github.shynixn'
version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true

    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    failFast = true

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message)
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

shadowJar {
    archiveName = "$baseName-$version.$extension"

    relocate 'kotlin', 'com.github.shynixn.petblocks.lib.kotlin'
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile group: 'org.apache.cxf', name: 'cxf-rt-rs-client', version: '3.3.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'

    testCompile 'org.mockito:mockito-core:2.23.0'
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Publish to Maven Central

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

artifacts {
    archives shadowJar
    archives sourceJar
    archives javadocJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            pom.project {
                name 'DiscordWebhook-Ktl'
                packaging 'jar'
                description 'DiscordWebhook-Ktl is a wrapper around the discord webhook bot REST api.'
                url 'https://github.com/Shynixn/DiscordWebhook-Ktl'

                scm {
                    connection 'scm:git:git://github.com/Shynixn/DiscordWebhook-Ktl.git'
                    developerConnection 'scm:git:ssh://github.com:Shynixn/DiscordWebhook-Ktl.git'
                    url 'http://github.com/Shynixn/DiscordWebhook-Ktl.git/tree/master'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                    }
                }

                developers {
                    developer {
                        name 'Shynixn'
                        url 'https://github.com/Shynixn'
                    }
                }
            }
        }
    }
}